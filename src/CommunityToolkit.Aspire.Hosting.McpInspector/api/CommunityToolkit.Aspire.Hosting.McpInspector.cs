//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Aspire.Hosting
{
    public partial class McpInspectorOptions
    {
        public int ClientPort { get { throw null; } set { } }

        public string InspectorVersion { get { throw null; } set { } }

        public ApplicationModel.IResourceBuilder<ApplicationModel.ParameterResource>? ProxyToken { get { throw null; } set { } }

        public int ServerPort { get { throw null; } set { } }
    }

    public static partial class McpInspectorResourceBuilderExtensions
    {
        public static ApplicationModel.IResourceBuilder<ApplicationModel.McpInspectorResource> AddMcpInspector(this IDistributedApplicationBuilder builder, string name, McpInspectorOptions options) { throw null; }

        public static ApplicationModel.IResourceBuilder<ApplicationModel.McpInspectorResource> AddMcpInspector(this IDistributedApplicationBuilder builder, string name, System.Action<McpInspectorOptions> configureOptions) { throw null; }

        [System.Obsolete("Use the overload with McpInspectorOptions instead. This overload will be removed in the next version.")]
        public static ApplicationModel.IResourceBuilder<ApplicationModel.McpInspectorResource> AddMcpInspector(this IDistributedApplicationBuilder builder, string name, int clientPort = 6274, int serverPort = 6277, string inspectorVersion = "0.16.2") { throw null; }

        public static ApplicationModel.IResourceBuilder<ApplicationModel.McpInspectorResource> AddMcpInspector(this IDistributedApplicationBuilder builder, string name) { throw null; }

        public static ApplicationModel.IResourceBuilder<ApplicationModel.McpInspectorResource> WithMcpServer<TResource>(this ApplicationModel.IResourceBuilder<ApplicationModel.McpInspectorResource> builder, ApplicationModel.IResourceBuilder<TResource> mcpServer, bool isDefault = true, McpTransportType transportType = McpTransportType.StreamableHttp)
            where TResource : ApplicationModel.IResourceWithEndpoints { throw null; }
    }

    public enum McpTransportType
    {
        StreamableHttp = 0,
        Sse = 1
    }
}

namespace Aspire.Hosting.ApplicationModel
{
    public partial class McpInspectorResource : ExecutableResource
    {
        public const string ClientEndpointName = "client";
        public const string InspectorVersion = "0.16.2";
        public const string ServerProxyEndpointName = "server-proxy";
        public McpInspectorResource(string name) : base(default!, default!, default!) { }

        public EndpointReference ClientEndpoint { get { throw null; } }

        public McpServerMetadata? DefaultMcpServer { get { throw null; } }

        public System.Collections.Generic.IReadOnlyList<McpServerMetadata> McpServers { get { throw null; } }

        public ParameterResource ProxyTokenParameter { get { throw null; } set { } }

        public EndpointReference ServerProxyEndpoint { get { throw null; } }
    }

    public partial record McpServerMetadata(string Name, EndpointReference Endpoint, McpTransportType TransportType)
    {
    }
}