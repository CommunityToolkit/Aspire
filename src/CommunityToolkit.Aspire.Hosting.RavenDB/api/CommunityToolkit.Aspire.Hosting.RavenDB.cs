//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Aspire.Hosting
{
    public static partial class RavenDBBuilderExtensions
    {
        public static ApplicationModel.IResourceBuilder<ApplicationModel.RavenDBDatabaseResource> AddDatabase(this ApplicationModel.IResourceBuilder<ApplicationModel.RavenDBServerResource> builder, string name, string? databaseName = null) { throw null; }

        public static ApplicationModel.IResourceBuilder<ApplicationModel.RavenDBServerResource> AddRavenDB(this IDistributedApplicationBuilder builder, string name, CommunityToolkit.Aspire.Hosting.RavenDB.RavenDBServerSettings serverSettings) { throw null; }

        public static ApplicationModel.IResourceBuilder<ApplicationModel.RavenDBServerResource> AddRavenDB(this IDistributedApplicationBuilder builder, string name, bool secured, System.Collections.Generic.Dictionary<string, object> environmentVariables, int? port = null) { throw null; }

        public static ApplicationModel.IResourceBuilder<ApplicationModel.RavenDBServerResource> AddRavenDB(this IDistributedApplicationBuilder builder, string name) { throw null; }

        public static ApplicationModel.IResourceBuilder<ApplicationModel.RavenDBServerResource> WithDataBindMount(this ApplicationModel.IResourceBuilder<ApplicationModel.RavenDBServerResource> builder, string source, bool isReadOnly = false) { throw null; }

        public static ApplicationModel.IResourceBuilder<ApplicationModel.RavenDBServerResource> WithDataVolume(this ApplicationModel.IResourceBuilder<ApplicationModel.RavenDBServerResource> builder, string? name = null, bool isReadOnly = false) { throw null; }
    }
}

namespace Aspire.Hosting.ApplicationModel
{
    public partial class RavenDBDatabaseResource : Resource, IResourceWithParent<RavenDBServerResource>, IResourceWithParent, IResource, IResourceWithConnectionString, IManifestExpressionProvider, IValueProvider, IValueWithReferences
    {
        public RavenDBDatabaseResource(string name, string databaseName, RavenDBServerResource parent) : base(default!) { }

        public ReferenceExpression ConnectionStringExpression { get { throw null; } }

        public string DatabaseName { get { throw null; } }

        public RavenDBServerResource Parent { get { throw null; } }
    }

    public partial class RavenDBServerResource : ContainerResource, IResourceWithConnectionString, IResource, IManifestExpressionProvider, IValueProvider, IValueWithReferences
    {
        public RavenDBServerResource(string name, bool isSecured) : base(default!, default) { }

        public ReferenceExpression ConnectionStringExpression { get { throw null; } }

        public System.Collections.Generic.IReadOnlyDictionary<string, string> Databases { get { throw null; } }

        public EndpointReference PrimaryEndpoint { get { throw null; } }

        public EndpointReference TcpEndpoint { get { throw null; } }
    }
}

namespace CommunityToolkit.Aspire.Hosting.RavenDB
{
    public sealed partial class LicensingOptions
    {
        public LicensingOptions(string license, bool eulaAccepted = true) { }

        public bool EulaAccepted { get { throw null; } }

        public string License { get { throw null; } }
    }

    public sealed partial class RavenDBSecuredServerSettings : RavenDBServerSettings
    {
        public RavenDBSecuredServerSettings(string certificatePath, string? certificatePassword, string publicServerUrl) { }

        public string? CertificatePassword { get { throw null; } }

        public string CertificatePath { get { throw null; } }

        public string PublicServerUrl { get { throw null; } }
    }

    public partial class RavenDBServerSettings
    {
        protected RavenDBServerSettings() { }

        public LicensingOptions? LicensingOptions { get { throw null; } }

        public string? ServerUrl { get { throw null; } set { } }

        public SetupMode SetupMode { get { throw null; } }

        public static RavenDBServerSettings Secured(string domainUrl, string certificatePath, string? certificatePassword = null, string? serverUrl = null) { throw null; }

        public static RavenDBServerSettings SecuredWithLetsEncrypt(string domainUrl, string certificatePath, string? certificatePassword = null, string? serverUrl = null) { throw null; }

        public static RavenDBServerSettings Unsecured() { throw null; }

        public void WithLicense(string license, bool eulaAccepted = true) { }
    }

    public enum SetupMode
    {
        None = 0,
        LetsEncrypt = 1,
        Secured = 2,
        Unsecured = 3
    }
}