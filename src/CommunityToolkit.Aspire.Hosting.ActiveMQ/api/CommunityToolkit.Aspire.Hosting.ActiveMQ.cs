//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Aspire.Hosting
{
    public static partial class ActiveMQBuilderExtensions
    {
        public static ApplicationModel.IResourceBuilder<ApplicationModel.ActiveMQServerResource> AddActiveMQ(this IDistributedApplicationBuilder builder, string name, ApplicationModel.IResourceBuilder<ApplicationModel.ParameterResource>? userName = null, ApplicationModel.IResourceBuilder<ApplicationModel.ParameterResource>? password = null, int? port = null, string scheme = "tcp", int? webPort = null) { throw null; }

        public static ApplicationModel.IResourceBuilder<ApplicationModel.ActiveMQArtemisServerResource> AddActiveMQArtemis(this IDistributedApplicationBuilder builder, string name, ApplicationModel.IResourceBuilder<ApplicationModel.ParameterResource>? userName = null, ApplicationModel.IResourceBuilder<ApplicationModel.ParameterResource>? password = null, int? port = null, string scheme = "tcp", int? webPort = null) { throw null; }

        public static ApplicationModel.IResourceBuilder<T> WithConfBindMount<T>(this ApplicationModel.IResourceBuilder<T> builder, string source, bool isReadOnly = false)
            where T : ApplicationModel.ActiveMQServerResourceBase { throw null; }

        public static ApplicationModel.IResourceBuilder<T> WithConfVolume<T>(this ApplicationModel.IResourceBuilder<T> builder, string? name = null, bool isReadOnly = false)
            where T : ApplicationModel.ActiveMQServerResourceBase { throw null; }

        public static ApplicationModel.IResourceBuilder<T> WithDataBindMount<T>(this ApplicationModel.IResourceBuilder<T> builder, string source, bool isReadOnly = false)
            where T : ApplicationModel.ActiveMQServerResourceBase { throw null; }

        public static ApplicationModel.IResourceBuilder<T> WithDataVolume<T>(this ApplicationModel.IResourceBuilder<T> builder, string? name = null, bool isReadOnly = false)
            where T : ApplicationModel.ActiveMQServerResourceBase { throw null; }
    }
}

namespace Aspire.Hosting.ApplicationModel
{
    public partial class ActiveMQArtemisServerResource : ActiveMQServerResourceBase
    {
        public ActiveMQArtemisServerResource(string name, ParameterResource? userName, ParameterResource password, string scheme) : base(default!, default, default!, default!, default!) { }
    }

    public partial class ActiveMQServerResource : ActiveMQServerResourceBase
    {
        public ActiveMQServerResource(string name, ParameterResource? userName, ParameterResource password, string scheme) : base(default!, default, default!, default!, default!) { }
    }

    public abstract partial class ActiveMQServerResourceBase : ContainerResource, IResourceWithConnectionString, IResource, IManifestExpressionProvider, IValueProvider, IValueWithReferences, IResourceWithEnvironment
    {
        protected ActiveMQServerResourceBase(string name, ParameterResource? userName, ParameterResource password, string scheme, CommunityToolkit.Aspire.Hosting.ActiveMQ.IActiveMQSettings settings) : base(default!, default) { }

        public CommunityToolkit.Aspire.Hosting.ActiveMQ.IActiveMQSettings ActiveMqSettings { get { throw null; } }

        public ReferenceExpression ConnectionStringExpression { get { throw null; } }

        public ParameterResource PasswordParameter { get { throw null; } }

        public EndpointReference PrimaryEndpoint { get { throw null; } }

        public ParameterResource? UserNameParameter { get { throw null; } }
    }
}

namespace CommunityToolkit.Aspire.Hosting.ActiveMQ
{
    public partial interface IActiveMQSettings
    {
        string ConfPath { get; }

        string DataPath { get; }

        string EnvironmentVariablePassword { get; }

        string EnvironmentVariableUsername { get; }

        string Image { get; }

        string JolokiaPath { get; }

        string Registry { get; }

        string Tag { get; }
    }
}