#nullable enable
Aspire.Hosting.ApplicationModel.SqliteResource
Aspire.Hosting.ApplicationModel.SqliteResource.ConnectionStringExpression.get -> Aspire.Hosting.ApplicationModel.ReferenceExpression!
Aspire.Hosting.ApplicationModel.SqliteResource.Extensions.get -> System.Collections.Generic.IReadOnlyCollection<Microsoft.Extensions.Hosting.SqliteExtensionMetadata!>!
Aspire.Hosting.ApplicationModel.SqliteResource.SqliteResource(string! name, string! databasePath, string! databaseFileName) -> void
Aspire.Hosting.ApplicationModel.SqliteWebResource
Aspire.Hosting.ApplicationModel.SqliteWebResource.ConnectionStringExpression.get -> Aspire.Hosting.ApplicationModel.ReferenceExpression!
Aspire.Hosting.ApplicationModel.SqliteWebResource.PrimaryEndpoint.get -> Aspire.Hosting.ApplicationModel.EndpointReference!
Aspire.Hosting.ApplicationModel.SqliteWebResource.SqliteWebResource(string! name) -> void
Aspire.Hosting.SqliteResourceBuilderExtensions
static Aspire.Hosting.SqliteResourceBuilderExtensions.AddSqlite(this Aspire.Hosting.IDistributedApplicationBuilder! builder, string! name, string? databasePath = null, string? databaseFileName = null) -> Aspire.Hosting.ApplicationModel.IResourceBuilder<Aspire.Hosting.ApplicationModel.SqliteResource!>!
static Aspire.Hosting.SqliteResourceBuilderExtensions.WithLocalExtension(this Aspire.Hosting.ApplicationModel.IResourceBuilder<Aspire.Hosting.ApplicationModel.SqliteResource!>! builder, string! extension, string! extensionPath) -> Aspire.Hosting.ApplicationModel.IResourceBuilder<Aspire.Hosting.ApplicationModel.SqliteResource!>!
static Aspire.Hosting.SqliteResourceBuilderExtensions.WithNuGetExtension(this Aspire.Hosting.ApplicationModel.IResourceBuilder<Aspire.Hosting.ApplicationModel.SqliteResource!>! builder, string! extension, string? packageName = null) -> Aspire.Hosting.ApplicationModel.IResourceBuilder<Aspire.Hosting.ApplicationModel.SqliteResource!>!
static Aspire.Hosting.SqliteResourceBuilderExtensions.WithSqliteWeb(this Aspire.Hosting.ApplicationModel.IResourceBuilder<Aspire.Hosting.ApplicationModel.SqliteResource!>! builder, string? containerName = null) -> Aspire.Hosting.ApplicationModel.IResourceBuilder<Aspire.Hosting.ApplicationModel.SqliteResource!>!
Microsoft.Extensions.Hosting.SqliteExtensionMetadata
Microsoft.Extensions.Hosting.SqliteExtensionMetadata.Extension.get -> string!
Microsoft.Extensions.Hosting.SqliteExtensionMetadata.Extension.init -> void
Microsoft.Extensions.Hosting.SqliteExtensionMetadata.ExtensionFolder.get -> string?
Microsoft.Extensions.Hosting.SqliteExtensionMetadata.ExtensionFolder.init -> void
Microsoft.Extensions.Hosting.SqliteExtensionMetadata.IsNuGetPackage.get -> bool
Microsoft.Extensions.Hosting.SqliteExtensionMetadata.IsNuGetPackage.init -> void
Microsoft.Extensions.Hosting.SqliteExtensionMetadata.PackageName.get -> string?
Microsoft.Extensions.Hosting.SqliteExtensionMetadata.PackageName.init -> void
Microsoft.Extensions.Hosting.SqliteExtensionMetadata.SqliteExtensionMetadata(string! Extension, string? PackageName, bool IsNuGetPackage, string? ExtensionFolder) -> void
