//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Aspire.Hosting
{
    public static partial class SurrealDbBuilderExtensions
    {
        public static ApplicationModel.IResourceBuilder<ApplicationModel.SurrealDbDatabaseResource> AddDatabase(this ApplicationModel.IResourceBuilder<ApplicationModel.SurrealDbNamespaceResource> builder, string name, string? databaseName = null) { throw null; }

        public static ApplicationModel.IResourceBuilder<ApplicationModel.SurrealDbNamespaceResource> AddNamespace(this ApplicationModel.IResourceBuilder<ApplicationModel.SurrealDbServerResource> builder, string name, string? namespaceName = null) { throw null; }

        public static ApplicationModel.IResourceBuilder<ApplicationModel.SurrealDbServerResource> AddSurrealServer(this IDistributedApplicationBuilder builder, string name, ApplicationModel.IResourceBuilder<ApplicationModel.ParameterResource>? userName = null, ApplicationModel.IResourceBuilder<ApplicationModel.ParameterResource>? password = null, int? port = null, string path = "memory", bool strictMode = false) { throw null; }

        [System.Diagnostics.CodeAnalysis.Experimental("CTASPIRE002")]
        public static ApplicationModel.IResourceBuilder<ApplicationModel.SurrealDbDatabaseResource> WithCreationScript(this ApplicationModel.IResourceBuilder<ApplicationModel.SurrealDbDatabaseResource> builder, string script) { throw null; }

        [System.Diagnostics.CodeAnalysis.Experimental("CTASPIRE002")]
        public static ApplicationModel.IResourceBuilder<ApplicationModel.SurrealDbNamespaceResource> WithCreationScript(this ApplicationModel.IResourceBuilder<ApplicationModel.SurrealDbNamespaceResource> builder, string script) { throw null; }

        public static ApplicationModel.IResourceBuilder<ApplicationModel.SurrealDbServerResource> WithDataBindMount(this ApplicationModel.IResourceBuilder<ApplicationModel.SurrealDbServerResource> builder, string source) { throw null; }

        public static ApplicationModel.IResourceBuilder<ApplicationModel.SurrealDbServerResource> WithDataVolume(this ApplicationModel.IResourceBuilder<ApplicationModel.SurrealDbServerResource> builder, string? name = null) { throw null; }

        [System.Diagnostics.CodeAnalysis.Experimental("CTASPIRE002")]
        public static ApplicationModel.IResourceBuilder<ApplicationModel.SurrealDbServerResource> WithInitFiles(this ApplicationModel.IResourceBuilder<ApplicationModel.SurrealDbServerResource> builder, string source) { throw null; }

        public static ApplicationModel.IResourceBuilder<T> WithSurrealist<T>(this ApplicationModel.IResourceBuilder<T> builder, System.Action<ApplicationModel.IResourceBuilder<ApplicationModel.SurrealistContainerResource>>? configureContainer = null, string? containerName = null)
            where T : ApplicationModel.SurrealDbServerResource { throw null; }
    }
}

namespace Aspire.Hosting.ApplicationModel
{
    public partial class SurrealDbDatabaseResource : Resource, IResourceWithParent<SurrealDbNamespaceResource>, IResourceWithParent, IResource, IResourceWithConnectionString, IManifestExpressionProvider, IValueProvider, IValueWithReferences
    {
        public SurrealDbDatabaseResource(string name, string databaseName, SurrealDbNamespaceResource parent) : base(default!) { }

        public ReferenceExpression ConnectionStringExpression { get { throw null; } }

        public string DatabaseName { get { throw null; } }

        public SurrealDbNamespaceResource Parent { get { throw null; } }
    }

    public partial class SurrealDbNamespaceResource : Resource, IResourceWithParent<SurrealDbServerResource>, IResourceWithParent, IResource, IResourceWithConnectionString, IManifestExpressionProvider, IValueProvider, IValueWithReferences
    {
        public SurrealDbNamespaceResource(string name, string namespaceName, SurrealDbServerResource parent) : base(default!) { }

        public ReferenceExpression ConnectionStringExpression { get { throw null; } }

        public System.Collections.Generic.IReadOnlyDictionary<string, string> Databases { get { throw null; } }

        public string NamespaceName { get { throw null; } }

        public SurrealDbServerResource Parent { get { throw null; } }
    }

    public partial class SurrealDbServerResource : ContainerResource, IResourceWithConnectionString, IResource, IManifestExpressionProvider, IValueProvider, IValueWithReferences
    {
        public SurrealDbServerResource(string name, ParameterResource? userName, ParameterResource password) : base(default!, default) { }

        public ReferenceExpression ConnectionStringExpression { get { throw null; } }

        public System.Collections.Generic.IReadOnlyDictionary<string, string> Namespaces { get { throw null; } }

        public ParameterResource PasswordParameter { get { throw null; } }

        public EndpointReference PrimaryEndpoint { get { throw null; } }

        public ParameterResource? UserNameParameter { get { throw null; } }

        public System.Threading.Tasks.ValueTask<string?> GetConnectionStringAsync(System.Threading.CancellationToken cancellationToken = default) { throw null; }
    }

    public sealed partial class SurrealistContainerResource : ContainerResource
    {
        public SurrealistContainerResource(string name) : base(default!, default) { }
    }
}