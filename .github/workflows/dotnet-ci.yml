name: .NET CI

on:
  pull_request:
    branches: ["*"]
    paths:
      - "src/**"
      - "examples/**"
      - "tests/**"
      - Directory.Build.props
      - Directory.Build.targets
      - Directory.Packages.props
      - ".github/workflows/**"

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build:
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest]
      fail-fast: false
    runs-on: "${{ matrix.os }}"
    env:
      DOTNET_CONFIGURATION: Release

    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: |
            8.0.x
            9.0.x
      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.11"
      - name: Install Uvicorn
        run: |
          python -m pip install --upgrade pip
          pip install uvicorn
      - uses: actions/setup-go@v5
        name: Set up Go
        with:
          go-version: "^1.22.1"
          cache-dependency-path: |
            ./**/go.sum
      - uses: actions/setup-java@v4
        name: Set up Java
        with:
          distribution: "microsoft"
          java-version: "21"
      - uses: actions/setup-node@v4
        name: Set up Node.js
        with:
          node-version: "latest"

      - uses: pnpm/action-setup@v4
        name: Setup pnpm
        with:
          version: 9
          run_install: false

      - uses: denoland/setup-deno@v2
        with:
          deno-version: v2.x

      - uses: actions/cache@v4
        name: Cache NuGet packages
        with:
          path: ~/.nuget/packages
          key: ${{ runner.os }}-nuget-${{ hashFiles('Directory.Packages.props') }}
          restore-keys: |
            ${{ runner.os }}-nuget-
      - uses: actions/cache@v4
        name: Cache Java Docker images
        with:
          path: /var/lib/docker/image
          key: ${{ runner.os }}-docker-${{ hashFiles('examples/java/CommunityToolkit.Aspire.Hosting.Java.Spring.Maven/Dockerfile') }}
          restore-keys: |
            ${{ runner.os }}-docker-

      - name: Get NPM package root
        id: npm-root
        run: "echo path=$(npm root -g) >> $GITHUB_OUTPUT"
        shell: bash

      - uses: actions/cache@v4
        name: Cache global npm packages
        with:
          path: ${{ steps.npm-root.outputs.path }}
          key: ${{ runner.os }}-npm-${{ hashFiles('.github/workflows/dotnet-ci.yml') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - uses: Swatinem/rust-cache@v2
        name: Cache Rust packages
        with:
          workspaces: "examples/rust/actix_api -> target"

      - name: Setup .NET dev certs
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: |
          dotnet tool update -g linux-dev-certs
          dotnet linux-dev-certs install
      - name: Setup Node projects
        run: |
          npm install -g @azure/static-web-apps-cli
          cd examples/swa/CommunityToolkit.Aspire.StaticWebApps.WebApp
          npm ci

      - name: Restore dependencies
        run: dotnet restore
      - name: Build
        run: dotnet build --no-restore --configuration ${{ env.DOTNET_CONFIGURATION }}
      - name: Test
        run: dotnet test --no-build --configuration ${{ env.DOTNET_CONFIGURATION }} --collect "XPlat Code Coverage" --results-directory test-results --logger trx /p:TrxLogFileNameSuffix=${{ matrix.os }}

      - name: Publish NuGet package
        run: dotnet pack --no-build -c ${{ env.DOTNET_CONFIGURATION }} -o ./nuget -p:VersionSuffix='alpha.${{ github.run_number }}'

        ## Only publish NuGet packages on Ubuntu, since we don't need to publish them on every OS
      - name: Publish NuGet packages as artifacts
        if: ${{ matrix.os == 'ubuntu-latest' && github.actor != 'dependabot[bot]' }}
        uses: actions/upload-artifact@v4
        with:
          name: nuget-packages
          path: ./nuget

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results-${{ matrix.os }}
          path: |
            ${{ github.workspace }}/test-results/**

      - name: List NuGet packages in step summary
        if: ${{ matrix.os == 'ubuntu-latest' }}
        run: ls -1 ${{ github.workspace }}/nuget/*.nupkg >> $GITHUB_STEP_SUMMARY

  publish-azure-artifacts:
    if: github.actor != 'dependabot[bot]' && github.event.pull_request.head.repo.full_name == github.repository
    needs: build
    runs-on: windows-latest
    environment:
      name: azure-artifacts
    steps:
      - name: Download package
        uses: actions/download-artifact@v4
        with:
          name: nuget-packages

      - name: Add AzDO NuGet feed
        run: >
          dotnet nuget add source 
          https://pkgs.dev.azure.com/dotnet/CommunityToolkit/_packaging/CommunityToolkit-PullRequests/nuget/v3/index.json
          --name PullRequests
          --username dummy
          --password ${{ secrets.DEVOPS_PACKAGE_PUSH_TOKEN }}

      - name: Push signed packages to AzDO
        run: >
          dotnet nuget push 
          "${{ github.workspace }}/**/*.nupkg" 
          --api-key dummy 
          --source PullRequests 
          --skip-duplicate

  publish-coverage:
    if: github.actor != 'dependabot[bot]'
    needs: build
    uses: ./.github/workflows/code-coverage.yml
    secrets: inherit
